import os
import logging
import json
from dotenv import load_dotenv
from telegram import Update, Message
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from typing import Dict, Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
TARGET_GROUP_ID = int(os.getenv('TARGET_GROUP_ID'))
TOPICS_FILE = 'user_topics.json'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id -> topic_id)
user_topics: Dict[int, int] = {}

def load_topics() -> Dict[int, int]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(TOPICS_FILE):
        with open(TOPICS_FILE, 'r') as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ —Å—Ç—Ä–æ–∫ –≤ int
            return {int(k): v for k, v in json.load(f).items()}
    return {}

def save_topics() -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º –≤ —Ñ–∞–π–ª"""
    with open(TOPICS_FILE, 'w') as f:
        json.dump(user_topics, f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user_topic(user_id: int, user_name: str, user_last_name: str, username: str, bot) -> Optional[int]:
    try:
        topic_name = f"{user_name} {user_last_name} (@{username}) ID{user_id}"
        result = await bot.create_forum_topic(
            chat_id=TARGET_GROUP_ID,
            name=topic_name
        )
        user_topics[user_id] = result.message_thread_id
        save_topics()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return result.message_thread_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        return None

async def new10topics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç 10 —Ç–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if update.effective_chat.id != TARGET_GROUP_ID:
        return
        
    try:
        # –°–æ–∑–¥–∞–µ–º 10 —Ç–µ–º
        for i in range(1, 11):
            topic_name = f"–¢–µ–º–∞ {i}"
            await context.bot.create_forum_topic(
                chat_id=TARGET_GROUP_ID,
                name=topic_name
            )
        
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ 10 –Ω–æ–≤—ã—Ö —Ç–µ–º!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º")

async def get_ids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º—ã"""
    
    if update.effective_user.id != ADMIN_ID:
        return
        
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_thread_id = update.effective_message.message_thread_id if update.effective_message.is_topic_message else None
    
    response = f"üë§ User ID: `{user_id}`\nüí≠ Chat ID: `{chat_id}`"
    if message_thread_id:
        response += f"\nüìå Topic ID: `{message_thread_id}`"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–º–∞
    if user.id not in user_topics:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        topic_id = await create_user_topic(
            user.id,
            user.first_name,
            user.last_name,
            user.username or "NoUsername",
            context.bot
        )
        if not topic_id:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.copy_message(
            chat_id=TARGET_GROUP_ID,
            message_thread_id=user_topics[user.id],
            from_chat_id=update.effective_chat.id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–µ–º–∞—Ö"""
    if update.effective_user.id != ADMIN_ID or not update.effective_message.is_topic_message:
        return
        
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Ç–µ–º—ã
    topic_id = update.effective_message.message_thread_id
    user_id = None
    
    for uid, tid in user_topics.items():
        if tid == topic_id:
            user_id = uid
            break
            
    if not user_id:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã")
        return
        
    try:
        await context.bot.copy_message(
            chat_id=user_id,
            from_chat_id=update.effective_chat.id,
            message_id=update.message.message_id
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    global user_topics
    user_topics = load_topics()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("new10topics", new10topics))
    application.add_handler(CommandHandler("ids", get_ids))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–∫—É –±–æ—Ç—É
    application.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & ~filters.COMMAND,
        handle_user_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ç–µ–º–∞—Ö
    application.add_handler(MessageHandler(
        filters.ChatType.SUPERGROUP & filters.IS_TOPIC_MESSAGE & ~filters.COMMAND,
        handle_admin_reply
    ))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 